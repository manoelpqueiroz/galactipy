# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[project]
name = "galactipy"
version = "0.12.0"
description = "Full-fledged template for Python projects."
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10"
authors = [
  { name = "Manoel Pereira de Queiroz", email = "mpq.dev@pm.me" },
  { name = "Roman Tezikov", email = "tez.romach@gmail.com" },
  { name = "Simon Otziger", email = "3603495+volemont@users.noreply.github.com" },
  { name = "Alexandre Bassel", email = "11035784+abassel@users.noreply.github.com" },
  { name = "Chen Shijiang", email = "chenshijiang@evision.ai" },
  { name = "Sebastian Thurm", email = "65230277+N720720@users.noreply.github.com" },
  { name = "Vsevolod Poletaev", email = "poletaev.va@gmail.com" },
  { name = "Mou Chenghao", email = "mouchenghao@gmail.com" },
  { name = "Peter Kogan", email = "kogan.peter@gmail.com" },
  { name = "Philipp Tempel", email = "git@philipptempel.me" },
  { name = "John Hagen", email = "johnthagen@users.noreply.github.com" },
]
maintainers = [
  { name = "Manoel Pereira de Queiroz", email = "mpq.dev@pm.me" },
]
keywords = [
  "python",
  "cookiecutter",
  "template",
  "packages",
  "best-practices",
  "poetry",
  "codestyle",
  "formatters",
  "python-packages",
  "semantic-versions",
]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = ["Private :: Do Not Upload"]

[project.urls]
homepage = "https://www.gitlab.com/galactipy/galactipy"
repository = "https://www.gitlab.com/galactipy/galactipy"


[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
requires-poetry = ">=2.0"
package-mode = false


[tool.poetry.dependencies]
python = "^3.10"
cookiecutter = "^2.6.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.14.1"
mypy-extensions = "^1.0.0"
pre-commit = "^4.1.0"
bandit = "^1.8.2"
safety = "~3.2.14"

ruff = "^0.9.2"

pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-cookies = "^0.7.0"
pytest-timeout = "^2.3.1"
pytest-sugar = "^1.0.0"
pytest-mock = "^3.14.0"
coverage = "^7.6.10"

invoke = "^2.2.0"


[tool.poetry.requires-plugins]
poetry-plugin-up = "^0.9.0"
poetry-bumpversion = "^0.3.3"

[[tool.poetry_bumpversion.replacements]]
files = ["README.md", "CITATION.cff"]


[tool.ruff]
# https://github.com/astral-sh/ruff
# https://docs.astral.sh/ruff/settings
extend-exclude = [
  "[{][{] cookiecutter.repo_name [}][}]",
] # https://github.com/astral-sh/ruff/issues/9585
output-format = "grouped"
show-fixes = true
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "I",
  "N",
  "D",
  "S",
  "B",
  "UP",
  "C90",
  "EM",
  "PL",
  "C4",
  "PT",
  "ANN",
  "ICN",
  "RET",
  "ISC",
  "RSE",
  "ARG",
  "SIM",
  "TID",
  "PTH",
  "BLE",
  "ERA",
  "TRY",
  "FLY",
  "YTT",
  "CPY",
  "RUF",
]
ignore = ["D200", "PT011"]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["D100", "D101", "D102", "D103", "D104", "S101"]
"tasks.py" = ["D100"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-line-length = 88
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-copyright]
author = "Manoel Pereira de Queiroz"
notice-rgx = "Copyright (C) 2023, 2024"

[tool.ruff.lint.pylint]
max-bool-expr = 3
max-args = 6

[tool.ruff.lint.isort]
split-on-trailing-comma = false
known-local-folder = ["hooks"]
sections.typing = [
  "typing",
  "types",
  "typing_extensions",
  "mypy",
  "mypy_extensions",
]
sections.testing = ["pytest", "tests"]
section-order = [
  "future",
  "typing",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
  "testing",
]

[tool.ruff.lint.mccabe]
max-complexity = 11


[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
files = ["hooks", "tests"]
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
explicit_package_bases = true
ignore_missing_imports = true
no_implicit_reexport = true
implicit_optional = false
show_column_numbers = true
show_error_context = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = [
  "{{ cookiecutter.repo_name }}",
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
doctest_optionflags = [
  "NUMBER",
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
]
timeout = 10

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--cov=hooks",
  "--cov-config=pyproject.toml",
  "--junitxml=test_report.xml"
]


[tool.coverage.run]
source = ["tests"]
branch = true
omit = ["test_template.py"]


[tool.coverage.report]
exclude_also = ["def main", "if __name__ == .__main__.:"]
fail_under = 90
show_missing = true


[tool.coverage.paths]
source = ["hooks"]
