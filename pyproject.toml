# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "galactipy"
version = "0.3.0"
description = "Cookiecutter template for Python packages"
readme = "README.md"
authors = ["Manoel Pereira de Queiroz <mpq.dev@pm.me>"]
license = "MIT"
repository = "https://gitlab.com/manoelpqueiroz/galactipy"
homepage = "https://gitlab.com/manoelpqueiroz/galactipy"
keywords = [
  "python",
  "cookiecutter",
  "template",
  "packages",
  "makefile",
  "best-practices",
  "poetry",
  "codestyle",
  "formatters",
  "python-packages",
  "semantic-versions"
]
package-mode = false

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = ["Private :: Do Not Upload"]


[tool.poetry.dependencies]
python = "^3.8"
cookiecutter = "^2.3.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.0.0"
mypy-extensions = "^0.4.3"
pre-commit = "^2.21.0"
bandit = "^1.7.5"
safety = "^2.3.4"

ruff = "^0.4.3"

pytest = "^7.2.1"
pytest-cov = "^4.1.0"
pytest-cookies = "^0.7.0"
pytest-timeout = "^2.2.0"
pytest-sugar = "^0.9.7"
coverage = "^7.3.0"


[tool.ruff]
# https://github.com/astral-sh/ruff
# https://docs.astral.sh/ruff/settings
extend-exclude = ["[{][{] cookiecutter.repo_name [}][}]"] # https://github.com/astral-sh/ruff/issues/9585
output-format = "grouped"
show-fixes = true
target-version = "py38"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "I",
  "N",
  "D",
  "S",
  "B",
  "UP",
  "C90",
  "EM",
  "PL",
  "C4",
  "PT",
  "ANN",
  "ICN",
  "RET",
  "ISC",
  "RSE",
  "ARG",
  "SIM",
  "TID",
  "PTH",
  "BLE",
  "ERA",
  "TRY",
  "FLY",
  "YTT",
  "CPY",
  "RUF"
]
ignore = ["D200", "PT011"]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["D100", "D101", "D102", "D103", "D104", "S101"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-line-length = 88
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-copyright]
author = "Manoel Pereira de Queiroz"
notice-rgx = "Copyright (C) 2023, 2024"

[tool.ruff.lint.pylint]
max-bool-expr = 3
max-args = 6

[tool.ruff.lint.isort]
split-on-trailing-comma = false
known-local-folder = ["hooks"]
sections.typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections.testing = ["pytest", "tests"]
section-order = [
  "future",
  "typing",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
  "testing"
]


[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.8
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =[
  "{{ cookiecutter.repo_name }}",
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__"
]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
timeout = 10

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]


[tool.coverage.run]
source = ["tests"]
branch = true
omit = [
  "test_template.py"
]


[tool.coverage.report]
exclude_also = [
  "def main",
  "if __name__ == .__main__.:"
]
fail_under = 90
show_missing = true


[tool.coverage.paths]
source = ["hooks"]
