# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
stages:
  - test
  - coverage
  - release
  - post-release
  - maintenance

variables:
  SEMVER_RELEASE_VERSION: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/i
  SEMVER_MINOR_VERSION: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.0$/i

# Anchors and script templates
.filechecks: &filechecks
  - "{{ cookiecutter.repo_name }}/**/*"
  - hooks/*
  - tests/*
  - utils/*
  - tasks.py
  - cookiecutter.json
  - .gitlab-ci.yml
  - .triage-policies.yml

.default_scripts: &default_scripts
  - invoke install --ignore-pty
  - invoke check-linter
  - invoke test
  - invoke check-safety

# CI definitions
workflow:
  rules:
    - if: $CI_COMMIT_TITLE =~ /(\:construction|WIP)\:.*/i
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^test.*/i
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

include:
  - component: $CI_SERVER_FQDN/components/gitlab-triage/gitlab-triage@0.1.2
    rules:
      - if: $CI_PIPELINE_SOURCE == 'schedule'
    inputs:
      api_token: $GALACTIPY_BOT_TOKEN
      stage: maintenance

default:
  cache:
    key: venv-$CI_COMMIT_REF_NAME-$CI_JOB_STAGE-$CI_COMMIT_SHA
    paths:
      - $CI_PROJECT_DIR/.cache/pip

# Template job for running tests
.test_rules:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: never
    - if: $GITLAB_USER_LOGIN =~ /^(project|group)_\d+_bot_\w+/i
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'merge_request_event'
      changes:
        paths: *filechecks
        compare_to: $CI_DEFAULT_BRANCH
      when: manual
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft\:.*/i
      changes:
        paths: *filechecks
      when: manual
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      changes:
        paths: *filechecks
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test-py310:
  stage: test
  image: registry.gitlab.com/galactipy/docker:3.10
  extends: .test_rules
  script:
    - *default_scripts

test-py311:
  stage: test
  image: registry.gitlab.com/galactipy/docker:3.11
  extends: .test_rules
  script:
    - *default_scripts

test-py312:
  stage: test
  image: registry.gitlab.com/galactipy/docker:3.12
  extends: .test_rules
  script:
    - *default_scripts

test-py313:
  stage: test
  image: registry.gitlab.com/galactipy/docker:3.13
  extends: .test_rules
  artifacts:
    name: coverage_$CI_COMMIT_REF_NAME_$CI_JOB_NAME_$CI_JOB_STARTED_AT
    paths:
      - coverage.xml
      - test_report.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: test_report.xml
    expire_in: 1 week
  script:
    - *default_scripts
    - invoke coverage

codacy-report:
  stage: coverage
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $GITLAB_USER_LOGIN =~ /^(project|group)_\d+_bot_\w+/i
      when: never
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'schedule'
  script:
    - apk add curl
    - curl -Ls https://coverage.codacy.com/get.sh -o codacy.sh
    - sh ./codacy.sh report -r coverage.xml

changelog-build:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  script:
    - apk add curl jq
    - >
      curl
      --header "PRIVATE-TOKEN: $GALACTIPY_BOT_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"
      |
      jq --raw-output .notes > RELEASE_NOTES.md
  artifacts:
    paths:
      - RELEASE_NOTES.md

changelog-commit:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  needs: [changelog-build]
  script:
    - apk add curl
    - >
      cat $CHANGELOG_COMMIT_PAYLOAD
      |
      curl
      --header "PRIVATE-TOKEN: $GALACTIPY_BOT_TOKEN"
      --header "Content-Type: application/json"
      --data @-
      --request POST
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog"

release-galactipy:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  needs: [changelog-build]
  script:
    - echo "Creating release $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    description: RELEASE_NOTES.md

github-mirror-mr:
  stage: post-release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_MINOR_VERSION
  script:
    - apk add curl
    - >
      cat $GH_MIRROR_MR_PAYLOAD
      |
      curl
      --header "PRIVATE-TOKEN: $GALACTIPY_BOT_TOKEN"
      --header "Content-Type: application/json"
      --data @-
      --request POST
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests"
      >
      mr_creation_response.json
  artifacts:
    paths:
      - mr_creation_response.json
    expire_in: 1 hour

github-mirror-commit:
  stage: post-release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_MINOR_VERSION
  needs: [github-mirror-mr]
  script:
    - apk add curl jq
    - export MR_ID=$(cat mr_creation_response.json | jq --raw-output .iid)
    - >
      curl
      --header "PRIVATE-TOKEN: $GALACTIPY_BOT_TOKEN"
      --request PUT
      --data '{"merge_when_pipeline_succeeds": true}'
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$MR_ID/merge"
      >
      mr_merge_response.json
  artifacts:
    name: github_mirror_$CI_COMMIT_REF_NAME_$CI_JOB_NAME_$CI_JOB_STARTED_AT
    paths:
      - mr_merge_response.json
    expire_in: 1 week

allow-github-merge:
  stage: post-release
  image: alpine:latest
  rules:
    - if: $GITLAB_USER_LOGIN =~ /^(project|group)_\d+_bot_\w+/i
  script:
    - echo "Token pipeline running after a commit was pushed by $GITLAB_USER_NAME."
