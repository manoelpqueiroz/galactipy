# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
# UPDATEME to suit your project's workflow
# General pipeline configuration
stages:
  - test
  - build
  - deploy
  - release
  - maintenance

# TODO Set up a bot for automated repository actions and components
# 1. Create a Project Access Token at {{ cookiecutter.__scm_link_url }}/settings/access_tokens
# 2. Ensure token has "Maintainer" role and "api" scope
# 3. Set the CI_API_TOKEN variable in {{ cookiecutter.__scm_link_url }}/settings/ci_cd
# 4. Ensure variable has at least "Masked" option flagged and "Protect variable" unchecked
include:
  - component: $CI_SERVER_FQDN/components/gitlab-triage/gitlab-triage@0.1.2
    rules:
      - if: $CI_PIPELINE_SOURCE == 'schedule'
    inputs:
      api_token: $CI_API_TOKEN
      stage: maintenance

variables:
  SEMVER_RELEASE_VERSION: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/i
  SEMVER_ANY_VERSION: /^(v)?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-z-][0-9a-z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-z-][0-9a-z-]*))*))?(?:\+([0-9a-z-]+(?:\.[0-9a-z-]+)*))?$/i

default:
  image: python:{{ cookiecutter.minimal_python_version }}
  rules:
    - if: $CI_PIPELINE_SOURCE != 'schedule'
  cache:
    key: venv-$CI_COMMIT_REF_NAME-$CI_JOB_STAGE-$CI_COMMIT_SHA
    paths:
      - $CI_PROJECT_DIR/.cache/pip

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
    - if: $GITLAB_USER_LOGIN =~ /^project_\d+_bot_\w+/i
      when: never

# Anchors for common commands
.env_setup: &env_setup
    - pip install invoke
    - invoke poetry-download
    - export PATH="/root/.local/bin:$PATH"
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install -U pip
    - invoke install --ignore-pty

.test_scripts: &test_scripts
  - invoke codestyle --check
  - invoke check-linter
  - invoke test
  - invoke check-safety

# Jobs
{%- set list_python_version = cookiecutter.minimal_python_version.split('.') | map('int') | list %}
{%- for version in cookiecutter._all_python_version if version[0] >= list_python_version[0] and version[1] >= list_python_version[1] %}

test-py{{ version[0] }}{{ version[1] }}:
  stage: test
  image: python:{{ version[0] }}.{{ version[1] }}
  script:
    - *env_setup
    - *test_scripts
{%- endfor %}

build-project:
  stage: build
  artifacts:
    paths:
      - dist/
  script:
    - *env_setup
    - invoke build

deploy-test:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_ANY_VERSION
  dependencies:
    - build-project
  script:
    - *env_setup
    # TODO Set the TESTPYPI_TOKEN variable for https://test.pypi.org in {{ cookiecutter.__scm_link_url }}/settings/ci_cd
    - invoke pypi-config $TESTPYPI_TOKEN --repo testpypi
    - invoke publish --repo testpypi --no-build

deploy-prod:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  dependencies:
    - build-project
  needs:
    - deploy-test
  script:
    - *env_setup
    # TODO Set the PYPI_TOKEN variable for https://pypi.org in {{ cookiecutter.__scm_link_url }}/settings/ci_cd
    - invoke pypi-config $PYPI_TOKEN
    - invoke publish --no-build

changelog-build:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  script:
    - apk add curl jq
    - >
      curl
      --header "PRIVATE-TOKEN: $CI_API_TOKEN"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG"
      |
      jq --raw-output .notes > RELEASE_NOTES.md
  artifacts:
    paths:
    - RELEASE_NOTES.md

changelog-commit:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  needs: [changelog-build]
  variables:
    CHANGELOG_COMMIT_MESSAGE: '%3Abookmark%3A%20Update%20CHANGELOG.md'
  script:
    - apk add curl
    - >
      curl
      --header "PRIVATE-TOKEN: $CI_API_TOKEN"
      --request POST
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG&message=$CHANGELOG_COMMIT_MESSAGE"

release-{{ cookiecutter.repo_name }}-pre:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_ANY_VERSION && $CI_COMMIT_TAG !~ $SEMVER_RELEASE_VERSION
  script:
    - echo "Creating release $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG

release-{{ cookiecutter.repo_name }}-stable:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ $SEMVER_RELEASE_VERSION
  needs: [changelog-build]
  script:
    - echo "Creating release $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    description: RELEASE_NOTES.md
