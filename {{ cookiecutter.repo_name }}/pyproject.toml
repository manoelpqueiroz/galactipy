{%- set licence_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3': 'License :: OSI Approved :: BSD License',
    'GNU GPL v3.0': 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'GNU AGPL v3.0': 'License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)',
    'GNU LGPL v3.0': 'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',
    'Mozilla Public License 2.0': 'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'nos': 'License :: Other/Proprietary License'
} -%}
{%- set list_python_version = cookiecutter.minimal_python_version.split('.') | map('int') | list %}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.licence }}"
repository = "{{ cookiecutter.__scm_base_url }}"
homepage = "{{ cookiecutter.__scm_base_url }}"
packages = [
  {% raw %}{{% endraw %}include = "{{ cookiecutter.repo_name }}"{% raw %}}{% endraw %}
]


# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  # UPDATEME with relevant keywords


# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  # UPDATEME with additional classifiers; remove last classifier to allow publishing on PyPI
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "{{ licence_classifiers[cookiecutter.licence] }}",
  "Programming Language :: Python :: 3",
  {%- for version in cookiecutter._all_python_version if version[0] >= list_python_version[0] and version[1] >= list_python_version[1] %}
  "Programming Language :: Python :: {{ version[0] }}.{{ version[1] }}",{% endfor %}
  "Private :: Do Not Upload"
]

{%+ if cookiecutter.create_cli %}
[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.repo_name }}" = "{{ cookiecutter.package_name }}.__main__:app"
{%+ endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{%+ if cookiecutter.create_cli %}
typer = {extras = ["all"], version = "^0.7.0"}
rich = "^12.6.0"
{%+ endif %}

[tool.poetry.group.dev.dependencies]
mypy = "^1.0.0"
mypy-extensions = "^0.4.3"
pre-commit = "^2.21.0"
bandit = "^1.7.5"
safety = "^2.3.4"
{%+ if cookiecutter.use_formatters %}
black = "^22.8.0"
isort = {extras = ["colors"], version = "^5.11.0"}
pyupgrade = "^3.0.0"
{%- endif %}
{%+ if cookiecutter.use_linters %}
flake8 = "^5.0.4"
{%- endif %}
{%- if cookiecutter.use_linters and cookiecutter.docstring_style != 'dismiss' %}
pydocstyle = {extras = ["toml"], version = "^6.2.0"}
{%- endif %}
{%- if cookiecutter.use_linters and cookiecutter.docstring_style not in ['pep257', 'dismiss'] %}
pydoclint = "^0.3.0"
{%+ endif %}
pytest = "^7.2.1"
pytest-html = "^3.2.0"
pytest-cov = "^4.1.0"
coverage = "^7.3.0"
coverage-badge = "^1.1.0"

{%+ if cookiecutter.use_formatters %}
[tool.black]
# https://github.com/psf/black
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
target-version = ["py{{ cookiecutter.__mpvr }}"]
line-length = {{ cookiecutter.line_length }}
color = true

exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | __pycache__
  | _build
  | buck-out
  | build
  | dist
  | env
  | venv
)/
'''


[tool.isort]
# https://github.com/PyCQA/isort
# https://pycqa.github.io/isort/docs/configuration/options.html
py_version = {{ cookiecutter.__mpvr }}
line_length = {{ cookiecutter.line_length }}

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
indent = 4
color_output = true
profile = "black"
{%+ endif %}

[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = {{ cookiecutter.minimal_python_version }}
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

{%+ if cookiecutter.use_linters and cookiecutter.docstring_style != 'dismiss' %}
[tool.pydocstyle]
# https://github.com/PyCQA/pydocstyle
# http://www.pydocstyle.org/en/stable/usage.html#available-options
convention = "{{ cookiecutter.docstring_style }}"
{%- endif %}

{%+ if cookiecutter.use_linters and cookiecutter.docstring_style not in ['pep257', 'dismiss'] %}
[tool.pydoclint]
# https://github.com/jsh9/pydoclint
# https://jsh9.github.io/pydoclint/how_to_config.html
style = "{{ cookiecutter.docstring_style }}"
exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | __pycache__
  | _build
  | buck-out
  | build
  | dist
  | env
  | venv
)/
'''
{%+ endif %}

[tool.pytest.ini_options]
# https://github.com/pytest-dev/pytest
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =[
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__"
]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]


[tool.coverage.run]
source = ["tests"]
branch = true


[tool.coverage.report]
exclude_also = [
  "def main",
  "if __name__ == .__main__.:"
]
fail_under = 50
show_missing = true


[tool.coverage.paths]
source = ["{{ cookiecutter.package_name }}"]
