# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[project]
name = "{{ cookiecutter.repo_name }}"
description = "{{ cookiecutter.project_description }}."
{%- if cookiecutter.licence == 'nos' %}
license = "Proprietary"
{%- else %}
license = {% raw %}{{% endraw %} text = "{{ cookiecutter.licence }}" {% raw %}}{% endraw %}
{%- endif %}
readme = "README.md"
requires-python = ">={{ cookiecutter.minimal_python_version }}"
authors = [
  {% raw %}{{% endraw %} name = "{{ cookiecutter.maintainer }}", email = "{{ cookiecutter.email }}" {% raw %}}{% endraw %},
]
maintainers = [
  {% raw %}{{% endraw %} name = "{{ cookiecutter.maintainer }}", email = "{{ cookiecutter.email }}" {% raw %}}{% endraw %},
]
# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  # UPDATEME with relevant keywords
dynamic = ["version", "classifiers"]
{%- if cookiecutter.app_type != 'bare_repo' %}

[project.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.repo_name }}" = "{{ cookiecutter.package_name }}.cli.commands.root_command:app"
{%- endif %}

[project.urls]
repository = "{{ cookiecutter.__scm_base_url }}"
homepage = "{{ cookiecutter.__scm_base_url }}"
"Work Item Tracker" = "{{ cookiecutter.__scm_link_url }}/issues"
"Contributing Guidelines" = "{{ cookiecutter.__scm_link_url }}/tree/master/CONTRIBUTING.md"


[build-system]
requires = ["poetry_core>=1.0.0", "poetry-dynamic-versioning>=1.7.1,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry]
requires-poetry = ">=2.0"
# Placeholder for poetry-dynamic-versioning, do not change:
# https://github.com/mtkennerly/poetry-dynamic-versioning#installation
packages = [{% raw %}{{% endraw %} include = "{{ cookiecutter.package_name }}" {% raw %}}{% endraw %}]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [ # UPDATEME with additional classifiers
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
{%- if cookiecutter.app_type != 'bare_repo' %}
  "Environment :: Console",
  "Topic :: Terminals",
{%- endif %}
  "Private :: Do Not Upload", # TODO Remove classifier to allow publishing on PyPI
]

version = "0.0.0"  # Keep this key as the last for `tool.poetry`, as it is used by `poetry-dynamic-versioning`


[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{%+ if cookiecutter.app_type == 'tui' or cookiecutter.app_type == 'hybrid' %}
textual = "^6.1.0"
art = "^6.5.0"  # UPDATEME by removing when no longer needed
{%- endif %}
{%+ if cookiecutter.app_type != 'bare_repo' %}
click = "~8.1.0" # HACK Click shouldn't require explicit declaration, but versions 8.2+ break Typer's behaviour
typer = { extras = ["all"], version = "^0.18.0" }
rich = "^14.1.0"

orbittings = "^0.2.0"
platformdirs = "^4.4.0"

nebulog = "^0.1.0"
{%- endif %}

[tool.poetry.group.dev.dependencies]
invoke = "^2.2.0"
mypy = { extras = ["reports"], version = "^1.14.1" }
mypy-extensions = "^1.0.0"
pre-commit = "^4.1.0"
bandit = "^1.8.2"
ruff = "^0.13.1"
pytest = "^8.3.4"
{%- if cookiecutter.use_bdd %}
pytest-bdd = "^8.1.0"
{%- endif %}
{%- if cookiecutter.app_type == 'tui' or cookiecutter.app_type == 'hybrid' %}
pytest-asyncio = "^1.0.0"
{%- endif %}
pytest-html = "^4.1.1"
pytest-cov = "^7.0.0"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-benchmark = "^5.1.0"
pytest-sugar = "^1.0.0"
pytest-pikachu = "^1.0.0"
coverage = "^7.6.10"
{%+ if cookiecutter.__debug %}

[tool.poetry.group.docs.dependencies]
sphinx = "^5.3.0"
pydata-sphinx-theme = "^0.14.3"
ipython = "^8.18.0"
{%- endif %}


[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = "^1.7.1", extras = ["plugin"] }
poetry-plugin-export = "^1.9.0"
poetry-plugin-up = "^0.9.0"
poetry-plugin-bundle = "^1.5.0"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
metadata = false
bump = { enable = true, index = 1 }


[tool.ruff]
# https://github.com/astral-sh/ruff
# https://docs.astral.sh/ruff/settings
output-format = "grouped"
show-fixes = true
target-version = "py{{ cookiecutter.__mpvr }}"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = {{ cookiecutter.docstring_length }}
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [ # UPDATEME with additional rules from https://docs.astral.sh/ruff/rules/
  "F",
  "E",
  "W",
  "I",
  "N",
  "D",
  "S",
  "B",
  "UP",
  "C90",
  "T20",
  "EM",
  "PL",
  "C4",
  "PT",
  "TD",
  "ANN",
  "ICN",
  "RET",
  "ISC",
  "RSE",
  "ARG",
  "FBT",
  "SIM",
  "TID",
  "PTH",
  "TCH",
  "FIX",
  "BLE",
  "ERA",
  "TRY",
  "FLY",
  "YTT",
  "CPY",
  "RUF",
]
ignore = ["D200"]
task-tags = [
  "BUG",
  "HACK",
  "FIXME",
  "FIXIT",
  "FIX",
  "NEEDSWORK",
  "UPDATEME",
  "TODO",
  "REFACTOR",
] # UPDATEME by modifying or removing this setting after addressing all UPDATEMEs

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D401",
  "S101",
  "ANN002",
  "ANN003",
  "ANN201",
  "PLR2004",
]
{%- if cookiecutter.app_type != 'bare_repo' %}
"__main__.py" = ["D100", "D101"]
{%- endif %}
"tasks.py" = ["FBT", "ANN002", "ANN003"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-values-type = "tuple"
parametrize-values-row-type = "list"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-line-length = {{ cookiecutter.line_length }}
max-doc-length = {{ cookiecutter.docstring_length }}
{%+ if cookiecutter.docstring_style != 'other' %}
[tool.ruff.lint.pydocstyle]
convention = "{{ cookiecutter.docstring_style }}"
{%+ endif %}
[tool.ruff.lint.flake8-copyright]
author = "{{ cookiecutter.copyright }}"

[tool.ruff.lint.pylint]
max-bool-expr = 3

[tool.ruff.lint.isort]
split-on-trailing-comma = false
known-first-party = ["{{ cookiecutter.package_name }}"]
section-order = [
  "future",
  "typing",
  "standard-library",
{%- if cookiecutter.app_type != 'bare_repo' %}
  "logging",
  "app-builders",
  "config",
{%- endif %}
  "third-party",
  "testing",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
{%- if cookiecutter.app_type in ['tui', 'hybrid'] %}
app-builders = ["rich", "typer", "textual"]
{%- elif cookiecutter.app_type == 'cli' %}
app-builders = ["rich", "typer"]
{%- endif %}
{%- if cookiecutter.app_type != 'bare_repo' %}
logging = ["logging", "loguru", "nebulog"]
config = ["dynaconf", "orbittings"]
{%- endif %}
typing = [
  "typing",
  "types",
  "typing_extensions",
  "mypy",
  "mypy_extensions",
  "pytype",
]
testing = [
  "pytest",
{%- if cookiecutter.use_bdd %}
  "pytest_bdd",
{%- endif %}
{%- if cookiecutter.app_type in ['tui', 'hybrid'] %}
  "pytest_asyncio",
{%- endif %}
  "pytest_mock",
  "pyfakefs",
  "testinfra",
]


[tool.mypy]
# https://github.com/python/mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
python_version = "{{ cookiecutter.minimal_python_version }}"
packages = ["{{ cookiecutter.package_name }}", "tests"]
html_report = "mypycov"
cobertura_xml_report = "mypy_coverage"
junit_xml = "mypy_report.xml"

pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
explicit_package_bases = true
ignore_missing_imports = true
no_implicit_reexport = true
implicit_optional = false
show_column_numbers = true
show_error_context = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "{{ cookiecutter.package_name }}"

disallow_any_generics = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests"
disable_error_code = ["import", "name-defined", "attr-defined"]


[tool.pytest.ini_options]
# https://github.com/pytest-dev/pytest
# https://docs.pytest.org/en/stable/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = [
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
doctest_optionflags = [
  "NUMBER",
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
]
markers = [
  "backend",
  "frontend",
{%- if cookiecutter.app_type != 'bare_repo' %}
  "cli",
{%- endif %}
  "standard",
  "validation",
  "edge",
  "security",
  "performance",
  "persistence",
  "config",
  "customization",
  "compatibility",
  "async",
  "integration",
  "database",
  "api",
  "identity",
  "networking",
  "monitoring",
]
timeout = 10
{%- if cookiecutter.use_bdd %}
bdd_features_base_dir = "tests/features/"
{%- endif %}

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  "--pikachu",
  "--cov={{ cookiecutter.package_name }}",
  "--cov-config=pyproject.toml",
  "--junitxml=test_report.xml",
{%- if cookiecutter.app_type == 'tui' or cookiecutter.app_type == 'hybrid' %}
  "--asyncio-mode=auto",
{%- endif %}
]


[tool.coverage.run]
# https://github.com/nedbat/coveragepy
# https://coverage.readthedocs.io/en/latest/config.html
source = ["."]
branch = true
{%- if cookiecutter.app_type != 'bare_repo' %}
omit = ["__main__.py", "*/config/constants.py"]
{%- endif %}


[tool.coverage.report]
exclude_also = [
  "def main",
  "def __str__",
  "def __repr__",
  "if __name__ == .__main__.:",
]
{%- if cookiecutter.app_type != 'bare_repo' %}
fail_under = 95
{%- else %}
fail_under = 90
{%- endif %}
show_missing = true


[tool.coverage.paths]
source = ["{{ cookiecutter.package_name }}"]

[tool.bandit]
# UPDATEME with your desired configuration
# https://github.com/PyCQA/bandit
# https://bandit.readthedocs.io/en/latest/config.html
